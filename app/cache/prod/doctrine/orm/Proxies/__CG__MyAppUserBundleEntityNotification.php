<?php

namespace Proxies\__CG__\MyApp\UserBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Notification extends \MyApp\UserBundle\Entity\Notification implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'idnotification', 'datenotification', 'typenotification', 'message', 'iddeal', 'idfromuser', 'idtouser');
        }

        return array('__isInitialized__', 'idnotification', 'datenotification', 'typenotification', 'message', 'iddeal', 'idfromuser', 'idtouser');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Notification $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdnotification()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdnotification();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdnotification', array());

        return parent::getIdnotification();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatenotification($datenotification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatenotification', array($datenotification));

        return parent::setDatenotification($datenotification);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatenotification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatenotification', array());

        return parent::getDatenotification();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypenotification($typenotification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypenotification', array($typenotification));

        return parent::setTypenotification($typenotification);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypenotification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypenotification', array());

        return parent::getTypenotification();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', array($message));

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', array());

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setIddeal(\MyApp\UserBundle\Entity\Deal $iddeal = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIddeal', array($iddeal));

        return parent::setIddeal($iddeal);
    }

    /**
     * {@inheritDoc}
     */
    public function getIddeal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIddeal', array());

        return parent::getIddeal();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdfromuser(\MyApp\UserBundle\Entity\User $idfromuser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdfromuser', array($idfromuser));

        return parent::setIdfromuser($idfromuser);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdfromuser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdfromuser', array());

        return parent::getIdfromuser();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdtouser(\MyApp\UserBundle\Entity\User $idtouser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdtouser', array($idtouser));

        return parent::setIdtouser($idtouser);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdtouser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdtouser', array());

        return parent::getIdtouser();
    }

}
